// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/quotes": {
            "get": {
                "description": "Retrieve all quotes or filter by author using query parameter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Get all quotes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Author filter",
                        "name": "author",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Quote"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a quote by providing author and quote text",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Add a new quote",
                "parameters": [
                    {
                        "description": "Quote object",
                        "name": "quote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Quote"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Quote"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quotes/random": {
            "get": {
                "description": "Retrieve one random quote from the store",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quotes"
                ],
                "summary": "Get a random quote",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Quote"
                        }
                    },
                    "404": {
                        "description": "No quotes found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/quotes/{id}": {
            "delete": {
                "description": "Remove a quote by its numeric ID",
                "tags": [
                    "quotes"
                ],
                "summary": "Delete a quote by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Quote not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Quote": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Author is the name of the person who said the quote.\nexample: Albert Einstein",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the quote.\nexample: 1",
                    "type": "integer"
                },
                "quote": {
                    "description": "Quote is the text of the quote.\nexample: Life is like riding a bicycle. To keep your balance, you must keep moving.",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Quote API",
	Description:      "REST API for managing quotes",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
